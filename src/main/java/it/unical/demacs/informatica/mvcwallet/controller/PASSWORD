        passwordText.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                checkPassword();
            }
        });


        private void checkName() {
                Platform.runLater(() -> {
                    BooleanBinding bb = new BooleanBinding() {
                        {
                            super.bind(nameText.textProperty());
                        }

                        @Override
                        protected boolean computeValue() {
                            return (nameText.getText().equals(nameSurnameArray[0]));
                        }
                    };
                    applyButton.disableProperty().bind(bb);
                });
            }



            private void checkSurname() {
                Platform.runLater(() -> {
                    BooleanBinding bb = new BooleanBinding() {
                        {
                            super.bind(surnameText.textProperty());
                        }

                        @Override
                        protected boolean computeValue() {
                            return (surnameText.getText().equals(nameSurnameArray[1]));
                        }
                    };
                    applyButton.disableProperty().bind(bb);
                });
            }


            private void checkPassword() {
                Platform.runLater(() -> {
                    BooleanBinding bb = new BooleanBinding() {
                        {
                            super.bind(
                                    passwordText.textProperty()
                            );
                        }

                        @Override
                        protected boolean computeValue() {
                            return (passwordText.getText().equals("prova"));
                        }
                    };
                    passwordButton.disableProperty().bind(bb);
                });

                }

                passwordText.textProperty().addListener((observable, oldValue, newValue) -> {
                            // Controlla se la password rispetta il Regex
                            if (newValue.matches("^(?=.*[A-Z])(?=.*[0-9])(?=.*[@!%&£°#'?*=])[a-zA-Z0-9@!%&£°#'?*=]{8,}"))
                                isGoodPassword = true;
                            else
                                isGoodPassword = false;
                            checkPassword();
                });
         @FXML
             void onChangePasswordButtonClick() {
                 if (SqlService.getIstance().serviceChangePassword(passwordText.getText(), usernameText.getText())) {
                     alertHandler.createChangedAlert("password");
                     sceneHandler.createSideBar();
                 }

             }
    /*
    @FXML
    private Button applyButton, backButton;

    @FXML
    private PasswordField passwordField;

    @FXML
    private CheckBox showPasswordCheckBox;
    boolean isGoodPassword;
    */

    /*
    @FXML
    void changeVisibility() {
        if (showPasswordCheckBox.isSelected()) {
            passwordText.setText(passwordField.getText());
            passwordText.setVisible(true);
            passwordField.setVisible(false);
            return;
        }
        passwordField.setText(passwordText.getText());
        passwordField.setVisible(true);
        passwordText.setVisible(false);
    }


     */